class Solution {
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return true;
        }
        if (board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    if (dfs(board, word, i, j, 0)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public boolean dfs(char[][] board, String word, int i, int j, int start) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {
            return false;
        }
        if (board[i][j] != word.charAt(start)) {
            return false;
        }
        board[i][j] = '$';
        if (start == word.length() - 1) {
            return true;
        }
        
        boolean res = dfs(board, word, i + 1, j, start + 1) || dfs(board, word, i - 1, j, start + 1) || dfs(board, word, i, j + 1, start + 1) || dfs(board, word, i, j - 1, start + 1);
        board[i][j] = word.charAt(start);
        return res;
    }
}
