class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int[] height = new int[matrix[0].length];
        for (int i = 0; i < matrix[0].length; i ++) {
            if (matrix[0][i] == '1') {
                height[i] = 1;
            }
        }
        for (int i = 0; i < matrix[0].length; i ++) {
            calculateHeight(i, height, matrix);
        }
        int maxArea = calculateArea(height);
        return maxArea;
    }
    
    private void calculateHeight(int idx, int[] height, char[][] matrix) {
        for (int j = 0; j < matrix.length; j ++) {
            if (matrix[j][idx] == '1') {
                height[idx] ++;
            }
            else {
                height[idx] = 0;
            }
        }
    }
    private int calculateArea(int[] height) {
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        int maxArea = 0;
        for (int i = 0; i < height.length; i ++) {
            if (stack.peek() == -1 || height[i] >= stack.peek()) {
                stack.push(i);
            }
            else {
                int temp = stack.pop();
                maxArea = Math.max(maxArea, height[temp] * (i - stack.peek() - 1));
                i --;
            }
            
        }
        return maxArea;
    }
}
