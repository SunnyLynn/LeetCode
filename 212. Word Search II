class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> list = new LinkedList<>();
        TrieNode root = constructTrie(words);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                
                //List<String> path = new LinkedList<>();
                dfs(board, root, sb, list, i, j);
                //list.addAll(path);   
            }
        }
        return list;
    }
    public void dfs(char[][] board, TrieNode root, StringBuilder sb, List<String> path, int i, int j) {
        if (i < 0 || j < 0 || i > board.length - 1 || j > board[0].length - 1) {
            return;
        }
        char c = board[i][j];
        if (root.item == "$") {
            path.add(new String(sb.toString()));
            return;
        }
        if (root.children[c - 'a'] == null) {
            return;
        } 
        if (c == '#') {
            return;
        }
        board[i][j] = '#';
        TrieNode node = root;
        root = root.children[c - 'a'];
        int len = sb.length();
        dfs(board, root, sb.append(c), path, i + 1, j);
        dfs(board, root, sb.append(c), path, i - 1, j);
        dfs(board, root, sb.append(c), path, i, j + 1);
        dfs(board, root, sb.append(c), path, i, j - 1);
        board[i][j] = c;
        root = node;
        sb.setLength(len);  
    }
    private class TrieNode {
        TrieNode[] children = new TrieNode[26];
        String item = "";
    }
    public TrieNode constructTrie(String[] words) {
        TrieNode root = new TrieNode();
        
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            TrieNode node = root;
            for (int j = 0; j < word.length(); j++) {
                char c = word.charAt(j);
                if (node.children[c - 'a'] == null) {
                    node.children[c - 'a'] = new TrieNode();
                }
                node = node.children[c - 'a'];
            }
            node.item = "$";
        }
        return root;
    }
}
